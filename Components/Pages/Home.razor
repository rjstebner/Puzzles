@page "/"
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>

<div class="main">
  <div class="seach-section">
    <div class="search-area">
      <input class="search-input" type="text" @bind="searchTerm" placeholder="Search for puzzles" />
      <button class="btn btn-primary" @onclick="Search">Search</button>
    </div>
    <div class="seach-sliders">
      <div>
        <label>Min price: @minPrice</label>
        <input type="range" @bind="minPrice" @bind:event="oninput" min="0" max="30" step="1" />
      </div>
      <div>
        <label>Max price: @maxPrice</label>
        <input type="range" @bind="maxPrice" @bind:event="oninput" min="0" max="30" step="1" />
      </div>
    </div>
  </div>

  <ul class="puzzle-cards">
    @if (filteredPuzzles != null)
    {
      @foreach (var puzzle in filteredPuzzles)
      {
        <li>
          <img class="puzzel-pic" width="200px" src="@puzzle.ImageUrl" alt="Puzzle Image" />
          <div class="puzzle-info">
            <p class="title">@puzzle.Name</p>
            <p class="puzzel-desc">@puzzle.Description</p>
            <p class="price">@puzzle.GetFormattedBasePrice()</p>
          </div>
          <div class="puzzel-btn-row">
            <button class="btn btn-primary" @onclick="() => CartState.AddToCart(puzzle)">Add to cart</button>
            @if (WishlistState.InWishlist(puzzle))
            {
              <button class="btn btn-wishlist-remove" @onclick="() => WishlistState.RemoveFromWishlist(puzzle)"></button>
            }
            else
            {
              <button class="btn btn-wishlist" @onclick="() => WishlistState.AddToWishlist(puzzle)"></button>
            }
          </div>

        </li>
      }
    }

  </ul>
</div>

@code {
  @inject CartState CartState;

  @inject WishlistState WishlistState;

  @using Puzzles.Services;
  @using Puzzles.Data;

  List<PuzzleList> puzzles = new();
  List<PuzzleList> filteredPuzzles = new();
  string searchTerm = "";
  decimal minPrice = 0;
  decimal maxPrice = 30;

  Cart cart => CartState.Cart;

  Puzzles.Wishlist wishlist => WishlistState.Wishlist;

  protected override void OnInitialized()
  {
    puzzles.AddRange(PuzzleData.GetPuzzles());
    filteredPuzzles = puzzles;
  }

  void Search()
  {
    filteredPuzzles = puzzles.Where(p => p.Name!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) && p.BasePrice >=
    minPrice && p.BasePrice <= maxPrice).ToList();
  }
}